// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime @map("expires_at")

  @@map("sessions")
}

model Password {
  id        String   @id @default(uuid()) @db.Uuid
  accountId String   @unique @map("user_id") @db.Uuid
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  account   Account  @relation(fields: [accountId], references: [id])

  @@map("passwords")
}

model Account {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  active        Boolean
  createdAt     DateTime  @default(now()) @map("created_at")
  createdUserId String?   @map("created_user_id") @db.Uuid
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  updatedUserId String?   @map("updated_user_id") @db.Uuid
  azureOid      String?   @map("azure_oid")
  phoneNumber   String?   @map("phone_number")
  displayName   String?   @map("display_name")
  address       String?
  password      Password?
  User          User?
  Driver        Driver?
  Staff         Staff?

  @@map("accounts")
}

model User {
  id             String           @id @default(uuid()) @db.Uuid
  accountId      String           @unique @db.Uuid
  account        Account          @relation(fields: [accountId], references: [id])
  BookingHistory BookingHistory[]

  @@map("users")
}

model DriverType {
  id     Int      @id @default(autoincrement())
  name   String
  Driver Driver[]
}

model Driver {
  id             String           @id @default(uuid()) @db.Uuid
  accountId      String           @unique @db.Uuid
  account        Account          @relation(fields: [accountId], references: [id])
  BookingHistory BookingHistory[]
  driverTypeId   Int
  driverType     DriverType       @relation(fields: [driverTypeId], references: [id])

  @@map("drivers")
}

model Staff {
  id        String  @id @default(uuid()) @db.Uuid
  accountId String  @unique @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])

  @@map("staffs")
}

model BookingHistory {
  id       String   @id @default(uuid()) @db.Uuid
  userId   String
  user     User     @relation(fields: [userId], references: [id])
  driverId String
  driver   Driver   @relation(fields: [driverId], references: [id])
  bookAt   DateTime @default(now()) @map("book_at")
  from     String
  to       String
}
